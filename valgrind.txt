==13869== Memcheck, a memory error detector
==13869== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==13869== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==13869== Command: ./sort
==13869== 
==13869== Invalid write of size 4
==13869==    at 0x108D8A: randomArray(unsigned long) (sort.cpp:34)
==13869==    by 0x108E1D: main (sort.cpp:48)
==13869==  Address 0x5c03ca8 is 0 bytes after a block of size 40 alloc'd
==13869==    at 0x4C3289F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==13869==    by 0x108D1C: randomArray(unsigned long) (sort.cpp:29)
==13869==    by 0x108E1D: main (sort.cpp:48)
==13869== 
==13869== Invalid write of size 4
==13869==    at 0x108D8A: randomArray(unsigned long) (sort.cpp:34)
==13869==    by 0x108EB9: main (sort.cpp:52)
==13869==  Address 0x5c04d58 is 0 bytes after a block of size 40 alloc'd
==13869==    at 0x4C3289F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==13869==    by 0x108D1C: randomArray(unsigned long) (sort.cpp:29)
==13869==    by 0x108EB9: main (sort.cpp:52)
==13869== 
==13869== Invalid write of size 4
==13869==    at 0x108D8A: randomArray(unsigned long) (sort.cpp:34)
==13869==    by 0x108F43: main (sort.cpp:61)
==13869==  Address 0x5c04dc8 is 0 bytes after a block of size 40 alloc'd
==13869==    at 0x4C3289F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==13869==    by 0x108D1C: randomArray(unsigned long) (sort.cpp:29)
==13869==    by 0x108F43: main (sort.cpp:61)
==13869== 
==13869== Invalid write of size 4
==13869==    at 0x108D8A: randomArray(unsigned long) (sort.cpp:34)
==13869==    by 0x108FCA: main (sort.cpp:65)
==13869==  Address 0x5c04e38 is 0 bytes after a block of size 40 alloc'd
==13869==    at 0x4C3289F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==13869==    by 0x108D1C: randomArray(unsigned long) (sort.cpp:29)
==13869==    by 0x108FCA: main (sort.cpp:65)
==13869== 
2 9 11 12 37 40 47 72 : sorted with the default operator<
71 66 64 56 29 21 18 18 : sorted with the standard library compare function object
3 11 20 24 51 64 82 84 : sorted with a custom function object
91 90 88 85 70 33 33 25 : sorted with a lambda expression
==13869== 
==13869== HEAP SUMMARY:
==13869==     in use at exit: 160 bytes in 4 blocks
==13869==   total heap usage: 6 allocs, 2 frees, 76,960 bytes allocated
==13869== 
==13869== 40 bytes in 1 blocks are definitely lost in loss record 1 of 4
==13869==    at 0x4C3289F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==13869==    by 0x108D1C: randomArray(unsigned long) (sort.cpp:29)
==13869==    by 0x108E1D: main (sort.cpp:48)
==13869== 
==13869== 40 bytes in 1 blocks are definitely lost in loss record 2 of 4
==13869==    at 0x4C3289F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==13869==    by 0x108D1C: randomArray(unsigned long) (sort.cpp:29)
==13869==    by 0x108EB9: main (sort.cpp:52)
==13869== 
==13869== 40 bytes in 1 blocks are definitely lost in loss record 3 of 4
==13869==    at 0x4C3289F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==13869==    by 0x108D1C: randomArray(unsigned long) (sort.cpp:29)
==13869==    by 0x108F43: main (sort.cpp:61)
==13869== 
==13869== 40 bytes in 1 blocks are definitely lost in loss record 4 of 4
==13869==    at 0x4C3289F: operator new[](unsigned long) (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==13869==    by 0x108D1C: randomArray(unsigned long) (sort.cpp:29)
==13869==    by 0x108FCA: main (sort.cpp:65)
==13869== 
==13869== LEAK SUMMARY:
==13869==    definitely lost: 160 bytes in 4 blocks
==13869==    indirectly lost: 0 bytes in 0 blocks
==13869==      possibly lost: 0 bytes in 0 blocks
==13869==    still reachable: 0 bytes in 0 blocks
==13869==         suppressed: 0 bytes in 0 blocks
==13869== 
==13869== For counts of detected and suppressed errors, rerun with: -v
==13869== ERROR SUMMARY: 8 errors from 8 contexts (suppressed: 0 from 0)
